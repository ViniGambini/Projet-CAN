Interface (John, Vincent, Thomas) : https://github.com/ViniGambini/Project_CAN_Interface
Documentation :
- Trame : envoie trame à 1000ms d'intervale
  id : 0x120
  dlc : 1
  data1 : uint8_t 
    0xFF = État Off (doit être par défaut, tout ce qui n'est pas 0x00 est considéré comme off)
    0x00 = État On

Capteur Temperature (Valérie, Rolly) :
Documentation :
- Trame :
  id : 0x160
  dlc : 3
  data0 : 8 premiers bits de la temp (178 à 258)
  data1 : 8 derniers bits de la temp (178 à 258)
  data2 : etat du chauffage: 0 (neutre)
                             1 (chauffage)
                             2 (refroidissement)

Capteur Vent (Kevin,Jonathan) : emetteur_vent.txt
Documentation : Pour le capteur vent, on simule une vitesse de vent de 0 à 400 km/h à l'aide d'un potentiomètre. On a aussi intégré 3 LEDS, une verte pour l'état transmission, une rouge pour l'état arrêt de transmission et une jaune pour l'état protection. 
De plus, on a ajouté un mode timeout pour se protéger si l'interface nous envoie plus rien, exemple quand le bus CAN est endommagé. 
Ce code accepte juste les messages provenant de 0x120 (interface). 
- Trame :
  id : 0x100 pour protection 
  dlc : 1
  data0 : 0xFF pour protection ON, 0x00 pour protection OFF
  La protection s'active quand le vent est égal ou supérieur à 250 km/h et se désactive en dessous.
  Les valeurs différents de 0x00 font en sorte que la protection est ON.
  Exemple: 0x08 = ON

  id : 0x140 pour capteur vent
  dlc : 2
  data0 : 8 dernier bits valeur vent 
  data1 : 8 premier bits valeur vent 

Batterie (Mihai, Cédric) : 
Documentation :
- Trame :
  id : 0x180
  dlc : 1
  data1 :Valeur de 0 à 100 en hexa(0x00 à 0x64)

Ondulateur (Étienne, Indi) : https://github.com/Etienne-Vallee-04/CAN_Project_Ondulateur.git 
Documentation :
- Trame :
  id : 0x1A0
  dlc : 3
  data0 : uint8_t valeur de 0 à 1 en Hexa(0x00 = état "off", 0xFF = État "on")
  data1 : 8 bits plus significatifs du wattage (0x00 à 0x01) 
  data3 : 8 bits moins significatifs du wattage (0x00 à 0xFF)
  Le wattage de 0 à 300 transmis en hexa ( 0x00 à 0x12C)
  documentation: le noeud de l'ondulateur simule une charge qui peut varier de 0W à 300W avec un potentiomètre. 
  Ensuite, il y a deux leds intégrés au noeud, une LED Verte pour signifier l'État "ON" et une LED Rouge pour signifier l'ÉTAT "OFF". 
  Aussi, il y a un intérrupteur afin de contrôler l'état du noeud uniquement si le système et à "ON".
  Dans le code, il y a 3 État: ON, OFF et OFF_Passive. On peut toujours recevoir les messages.

Panneau Solaire (Les Santiagoss) : https://github.com/SantyMG19/PanneauSolaire_MARS.git
Documentation :
- Trame :
  id : 0x1C0
  dlc : 2
  data0 : 8 bits plus significatifs du wattage
  data1 : 8 bits moins significatifs du wattage
  wattaga de 0 à 300

etc ...
