/**
 * Auteurs: Cédric Frenette et Mihai Stinga
 * Établissement: Collège de Maisonneuve
 * Description: Ce programme envoie l'etat d'une batterie simulee par un potentiometre 
 * et vient lire certaines trames qui nous sont nécessaires a la protection de notre robot 
 * qui va sur Mars
 */

/*
    (c) 2018 Microchip Technology Inc. and its subsidiaries. 
    
    Subject to your compliance with these terms, you may use Microchip software and any 
    derivatives exclusively with Microchip products. It is your responsibility to comply with third party 
    license terms applicable to your use of third party software (including open source software) that 
    may accompany Microchip software.
    
    THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER 
    EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY 
    IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS 
    FOR A PARTICULAR PURPOSE.
    
    IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND 
    WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP 
    HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO 
    THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL 
    CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT 
    OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS 
    SOFTWARE.
 */

#include "mcc_generated_files/mcc.h"

uint8_t flag_1s; //Flag pour compter 1 sec
uint8_t flag_5s_100;
uint8_t etat_systeme;
uint8_t protection;
uint16_t energie_panneau;
uint16_t energie_ondulateur;
int16_t variation_batterie;
uint8_t controle = 1;

//fonction qui active les flag Ã  chaque interruption du timer

void compteur_transmission(void) {
    flag_1s = 1;
    flag_5s_100++;
}


//nom des Ã©tat pour la machine Ã  Ã©tat
int etat;

enum {
    lecture_CAN, transmission_batterie, idle, non_transmission
};

void main(void) {
    // Initialize the device
    SYSTEM_Initialize();

    //instantiation de l'interruption sur le timer 0
    TMR0_SetInterruptHandler(compteur_transmission);
    //ECAN_SetRXB0InterruptHandler(lecture_trame);
    INTERRUPT_GlobalInterruptEnable();
    INTERRUPT_PeripheralInterruptEnable();

    RXF1SIDH = 0x32; //definition de nos filtres
    RXF1SIDL = 0x00;

    RXM1SIDH = 0xE7; //definition de nos masques
    RXM1SIDL = 0xE0;

    RXF0SIDH = 0x24; //definition de nos filtres
    RXF0SIDL = 0x00;

    RXM0SIDH = 0xFF; //definition de nos masques
    RXM0SIDL = 0xE0;


    uCAN_MSG txCan;

    uCAN_MSG rxCan;
    //Initialized for display purpose before receiving first message
    rxCan.frame.id = 0;
    rxCan.frame.dlc = 0;
    rxCan.frame.data0 = 0;

    etat = idle; //initialisation de l'etat de depart

    //Remise a 0 du timer et des flags
    TMR0_Reload();

    while (1) {

        switch (etat) {

            case idle:
                //si une seconde est ecoule
                if (flag_1s == 1) {
                    flag_1s = 0; //remettre le compte a 0
                    etat = transmission_batterie; //aller a l'etat pour transmettre la temperature
                } 
                break;
            case transmission_batterie:
                IO_RA5_SetHigh();
                txCan.frame.id = 0x180; //mettre l'ID de la trame a 0x180
                txCan.frame.dlc = 1; //Indique que 1 octets de donnÃ©es sont transmis

                //Condition qui permet d'enlever toute valeur qui sont en bas de 0 avec le potentiometre
                if (ADC_GetConversion(channel_AN0) == 0xffff) { //si la valeur est negative, aors transmettre 0
                    txCan.frame.data0 = 0;
                } else { //si la valeur n'est pas negative, transmettre une valeur de 0 a 255 proportionnelle
                    txCan.frame.data0 = ADC_GetConversion(channel_AN0)*0.0245099; //temperature 1er capteur
                }

                CAN_transmit(&txCan); //transmettre la trame

                etat = lecture_CAN;     //changer d'etat 

                break;

            case lecture_CAN:
                if (CAN_receive(&rxCan) >= 1) { //si on reçoit un message
                    if (rxCan.frame.id == 0x100 || rxCan.frame.id == 0x120) { // si on reçoit une trame ayant soit le id 100 ou 120
                        if (rxCan.frame.id == 0x100) { //si on reçoit une trame 100 on rentre dans le if 
                            protection = rxCan.frame.data0;         //associer le data dans protection
                        } else if (rxCan.frame.id == 0x120) {                   //si on recoit une trame 120 rentre dans le if 
                            etat_systeme = rxCan.frame.data0;       //associer le data 0 a la variable etat systeme
                        }
                        if (protection == 0x00 && etat_systeme == 0x00) {       //si protection et etat_systeme sont tous les deux egaux a 00 donc je peux continuer a transmettre
                            etat = idle;        
                        } else {
                            IO_RA5_SetLow();                    //sinon on eteint la led
                        }
                    }
                }
                /*****Début de code pour la modification de la batterie*****/
                /*  #if (rxCan.frame.id == 0x1A0 || rxCan.frame.id == 0x1C0){
                    if (rxCan.frame.id == 0x1C0) {
                        energie_panneau = (rxCan.frame.data0 << 8) + rxCan.frame.data1 ;
                    } else if (rxCan.frame.id == 0x1C0) {
                        energie_ondulateur = (rxCan.frame.data1 << 8) + rxCan.frame.data2 ;;
                    }
                            
                    variation_batterie = energie_panneau - energie_ondulateur;
                            
                    etat = idle;
                            
                }*/
                break;
        }
    }
}
/**
 End of File
 */
